type Query {
  apiVersion: ID!
  streams: [Stream!]!
  stream(streamID: Int!): Stream!
  entity(streamID: Int!, entityID: Uint!): Entity!
}

type Stream {
  pid: Int!
  characterID: Uint!

  place: Place!
  enmity: Enmity!
  craftingInfo: CraftingInfo

  entities: [Entity!]!
}

type Place {
  mapID: Int!
  territoryID: Int!
  maps: [MapInfo!]!
}

type MapInfo {
  key: Int!
  id: ID!
  SizeFactor: Int!
  OffsetX: Int!
  OffsetY: Int!
  PlaceName: String!
  PlaceNameSub: String!
  TerritoryType: String!
}

type Enmity {
  targetHateRanking: [HateRanking!]!
  nearbyEnemyHate: [HateEntry!]!
}

type Entity {
  id: Uint!
  index: Int!
  name: String!
  targetID: Uint!
  ownerID: Uint!
  level: Int!
  classJob: ClassJob!
  isNPC: Boolean!
  isEnemy: Boolean!
  isPet: Boolean!
  bNPCInfo: NPCInfo
  resources: Resources!
  location: Location!
  lastAction: Action
  statuses: [Status]!
  lockonMarker: Int!

  castingInfo: CastingInfo

  rawSpawnJSONData: String!
}

type HateRanking {
  actorID: Uint!
  hate: Int!
}

type HateEntry {
  enemyID: Uint!
  hatePercent: Int!
}

type NPCInfo {
  nameID: Int!
  baseID: Int!
  modelID: Int!
  name: String
  size: Float
  error: Int!
}

type ClassJob {
  id: Int!
  name: String!
  abbreviation: String!
}

type Resources {
  hp: Int!
  mp: Int!
  tp: Int!
  maxHP: Int!
  maxMP: Int!
  lastTick: Timestamp!
}

type Location {
  x: Float!
  y: Float!
  z: Float!
  orientation: Float!
  lastUpdated: Timestamp!
}

type Action {
  targetID: Uint!
  name: String!
  globalCounter: Int!
  animationLockTime: Float!
  hiddenAnimation: Int!
  location: Location!
  id: Int!
  variation: Int!
  effectDisplayType: Int!
  isAoE: Boolean!
  effects: [ActionEffect!]!
  effectFlags: Int!
  useTime: Timestamp!
}

type ActionEffect {
  targetID: Uint!
  type: Int!
  hitSeverity: Int!
  param: Int!
  bonusPercent: Int!
  valueMultiplier: Int!
  flags: Int!
  value: Int!
}

type Status {
  id: Int!
  extra: Int!
  name: String!
  startedTime: Timestamp!
  duration: Timestamp!
  actorID: Uint!
  lastTick: Timestamp!
}

type CastingInfo {
  actionID: Int!
  actionName: String!
  startTime: Timestamp!
  castTime: Timestamp!
  targetID: Uint!
  location: Location!

  castType: Int!
  effectRange: Int!
  xAxisModifier: Int!
  omen: String!
}

type CraftingInfo {
  recipeID: Int!
  lastCraftAction: Int!
  stepNum: Int!
  totalProgress: Int!
  progressDelta: Int!
  totalQuality: Int!
  qualityDelta: Int!
  hqChance: Int!
  durability: Int!
  durabilityDelta: Int!
  currentCondition: Int!
  previousCondition: Int!
}

type Subscription {
  streamEvent: StreamEvent!
  entityEvent: EntityEvent!
}

type StreamEvent {
  streamID: Int!
  type: StreamEventType!
}

union StreamEventType =
  AddStream |
  RemoveStream |
  UpdateMap |
  UpdateCraftingInfo |
  UpdateEnmity

type AddStream {
  stream: Stream!
}

type RemoveStream {
  id: Int!
}

type UpdateMap {
  place: Place!
}

type UpdateCraftingInfo {
  craftingInfo: CraftingInfo!
}

type UpdateEnmity {
  enmity: Enmity!
}

type EntityEvent {
  streamID: Int!
  entityID: Uint!
  type: EntityEventType!
}

union EntityEventType =
  AddEntity |
  RemoveEntity |
  SetEntities |
  UpdateTarget |
  UpdateClass |
  UpdateLastAction |
  UpdateCastingInfo |
  UpsertStatus |
  RemoveStatus |
  UpdateLocation |
  UpdateResources |
  UpdateLockonMarker

type AddEntity {
  entity: Entity!
}

type RemoveEntity {
  id: Uint!
}

type SetEntities {
  entities: [Entity!]!
}

type UpdateTarget {
  targetID: Uint!
}

type UpdateClass {
  classJob: ClassJob!
}

type UpdateLastAction {
  action: Action!
}

type UpdateCastingInfo {
  castingInfo: CastingInfo
}

type UpsertStatus {
  index: Int!
  status: Status!
}

type RemoveStatus {
  index: Int!
}

type UpdateLocation {
  location: Location!
}

type UpdateResources {
  resources: Resources!
}

type UpdateLockonMarker {
  lockonMarker: Int!
}

scalar Timestamp
scalar Uint

type Mutation {
  sendStreamRequest(request: StreamRequest!): String!
}

input StreamRequest {
  streamID: Int!
  data: String!
}