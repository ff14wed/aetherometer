type Query {
  streams: [Stream!]!
  stream(streamID: Int!): Stream!
  entity(streamID: Int!, entityID: Int!): Entity!
}

type Stream {
  pid: Int!
  myEntityID: Int!

  place: Place!
  enmity: Enmity!
  craftingInfo: CraftingInfo

  entities: [Entity!]!
}

type Place {
  mapID: Int!
  territoryID: Int!
  maps: [MapInfo!]!
}

type MapInfo {
  key: Int!
  id: ID!
  SizeFactor: Int!
  OffsetX: Int!
  OffsetY: Int!
  PlaceName: String!
  PlaceNameSub: String!
  TerritoryType: String!
}

type Enmity {
  targetHateRanking: [HateRanking!]!
  nearbyEnemyHate: [HateEntry!]!
}

type Entity {
  id: Int!
  index: Int!
  name: String!
  targetID: Int!
  ownerID: Int!
  level: Int!
  class: Int!
  isNPC: Boolean!
  isEnemy: Boolean!
  isPet: Boolean!
  bNPCInfo: NPCInfo
  resources: Resources!
  location: Location!
  lastAction: Action
  statuses: [Status]!

  castingInfo: CastingInfo

  rawSpawnJSONData: String!
}

type HateRanking {
  actorID: Int!
  hate: Int!
}

type HateEntry {
  enemyID: Int!
  hatePercent: Int!
}

type NPCInfo {
  nameID: Int!
  baseID: Int!
  modelID: Int!
  name: String
  size: Float
  error: Int!
}

type Resources {
	hp: Int!
	mp: Int!
	tp: Int!
	maxHP: Int!
	maxMP: Int!
	lastTickMs: Int!
}

type Location {
  x: Float!
  y: Float!
  z: Float!
  orientation: Float!
  lastUpdatedMs: Int!
}

type Action {
  id: Int!
  name: String!
  targetID: Int!
  useTimeMs: Int!
}

type Status {
  id: Int!
  extra: Int!
  name: String!
  startedTimeMs: Int!
  durationMs: Int!
  actorID: Int!
  lastTickMs: Int!

  baseDamage: Int!
  critRate: Int!
}

type CastingInfo {
	actionID: Int!
	actionName: String!
	startTimeMs: Int!
	castTimeMs: Int!
	targetID: Int!
  location: Location!

	castType: Int!
	effectRange: Int!
	xAxisModifier: Int!
	omen: String!
}

type CraftingInfo {
	lastCraftAction: Int!
	stepNum: Int!
	totalProgress: Int!
	progressDelta: Int!
	totalQuality: Int!
	qualityDelta: Int!
	hqChance: Int!
	durability: Int!
	durabilityDelta: Int!
	currentCondition: Int!
	previousCondition: Int!
}

type Subscription {
  streamEvents: StreamEvent!
  entityEvents: EntityEvent!
}

type StreamEvent {
  streamID: Int!
  type: StreamEventType!
}

union StreamEventType =
  AddStream |
  RemoveStream |
  UpdateMap |
  UpdateCraftingInfo |
  UpdateEnmity

type AddStream {
  stream: Stream!
}

type RemoveStream {
  id: Int!
}

type UpdateMap {
  place: Place!
}

type UpdateCraftingInfo {
  craftingInfo: CraftingInfo!
}

type UpdateEnmity {
  enmity: Enmity!
}

type EntityEvent {
  streamID: Int!
  entityID: Int!
  type: EntityEventType!
}

union EntityEventType =
  AddEntity |
  RemoveEntity |
  UpdateEntityTarget |
  UpdateEntityClass |
  UpdateLastAction |
  UpdateCastingInfo |
  UpsertStatus |
  RemoveStatus |
  UpdateLocation |
  UpdateResources

type AddEntity {
  entity: Entity!
}

type RemoveEntity {
  id: Int!
}

type UpdateEntityTarget {
  targetID: Int!
}

type UpdateEntityClass {
  class: Int!
}

type UpdateLastAction {
  action: Action!
}

type UpdateCastingInfo {
  castingInfo: CastingInfo!
}

type UpsertStatus {
  index: Int!
  status: Status!
}

type RemoveStatus {
  index: Int!
}

type UpdateLocation {
  location: Location!
}

type UpdateResources {
  resources: Resources!
}
