// Code generated by counterfeiter. DO NOT EDIT.
package hookfakes

import (
	"sync"

	"github.com/ff14wed/sibyl/backend/adapter/hook"
	xivnet "github.com/ff14wed/xivnet/v3"
)

type FakeStream struct {
	SendRequestStub        func([]byte) ([]byte, error)
	sendRequestMutex       sync.RWMutex
	sendRequestArgsForCall []struct {
		arg1 []byte
	}
	sendRequestReturns struct {
		result1 []byte
		result2 error
	}
	sendRequestReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	ServeStub        func()
	serveMutex       sync.RWMutex
	serveArgsForCall []struct {
	}
	StopStub        func()
	stopMutex       sync.RWMutex
	stopArgsForCall []struct {
	}
	StreamIDStub        func() int
	streamIDMutex       sync.RWMutex
	streamIDArgsForCall []struct {
	}
	streamIDReturns struct {
		result1 int
	}
	streamIDReturnsOnCall map[int]struct {
		result1 int
	}
	SubscribeEgressStub        func() <-chan *xivnet.Frame
	subscribeEgressMutex       sync.RWMutex
	subscribeEgressArgsForCall []struct {
	}
	subscribeEgressReturns struct {
		result1 <-chan *xivnet.Frame
	}
	subscribeEgressReturnsOnCall map[int]struct {
		result1 <-chan *xivnet.Frame
	}
	SubscribeIngressStub        func() <-chan *xivnet.Frame
	subscribeIngressMutex       sync.RWMutex
	subscribeIngressArgsForCall []struct {
	}
	subscribeIngressReturns struct {
		result1 <-chan *xivnet.Frame
	}
	subscribeIngressReturnsOnCall map[int]struct {
		result1 <-chan *xivnet.Frame
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStream) SendRequest(arg1 []byte) ([]byte, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.sendRequestMutex.Lock()
	ret, specificReturn := fake.sendRequestReturnsOnCall[len(fake.sendRequestArgsForCall)]
	fake.sendRequestArgsForCall = append(fake.sendRequestArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	fake.recordInvocation("SendRequest", []interface{}{arg1Copy})
	fake.sendRequestMutex.Unlock()
	if fake.SendRequestStub != nil {
		return fake.SendRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.sendRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStream) SendRequestCallCount() int {
	fake.sendRequestMutex.RLock()
	defer fake.sendRequestMutex.RUnlock()
	return len(fake.sendRequestArgsForCall)
}

func (fake *FakeStream) SendRequestCalls(stub func([]byte) ([]byte, error)) {
	fake.sendRequestMutex.Lock()
	defer fake.sendRequestMutex.Unlock()
	fake.SendRequestStub = stub
}

func (fake *FakeStream) SendRequestArgsForCall(i int) []byte {
	fake.sendRequestMutex.RLock()
	defer fake.sendRequestMutex.RUnlock()
	argsForCall := fake.sendRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStream) SendRequestReturns(result1 []byte, result2 error) {
	fake.sendRequestMutex.Lock()
	defer fake.sendRequestMutex.Unlock()
	fake.SendRequestStub = nil
	fake.sendRequestReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeStream) SendRequestReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.sendRequestMutex.Lock()
	defer fake.sendRequestMutex.Unlock()
	fake.SendRequestStub = nil
	if fake.sendRequestReturnsOnCall == nil {
		fake.sendRequestReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.sendRequestReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeStream) Serve() {
	fake.serveMutex.Lock()
	fake.serveArgsForCall = append(fake.serveArgsForCall, struct {
	}{})
	fake.recordInvocation("Serve", []interface{}{})
	fake.serveMutex.Unlock()
	if fake.ServeStub != nil {
		fake.ServeStub()
	}
}

func (fake *FakeStream) ServeCallCount() int {
	fake.serveMutex.RLock()
	defer fake.serveMutex.RUnlock()
	return len(fake.serveArgsForCall)
}

func (fake *FakeStream) ServeCalls(stub func()) {
	fake.serveMutex.Lock()
	defer fake.serveMutex.Unlock()
	fake.ServeStub = stub
}

func (fake *FakeStream) Stop() {
	fake.stopMutex.Lock()
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct {
	}{})
	fake.recordInvocation("Stop", []interface{}{})
	fake.stopMutex.Unlock()
	if fake.StopStub != nil {
		fake.StopStub()
	}
}

func (fake *FakeStream) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakeStream) StopCalls(stub func()) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = stub
}

func (fake *FakeStream) StreamID() int {
	fake.streamIDMutex.Lock()
	ret, specificReturn := fake.streamIDReturnsOnCall[len(fake.streamIDArgsForCall)]
	fake.streamIDArgsForCall = append(fake.streamIDArgsForCall, struct {
	}{})
	fake.recordInvocation("StreamID", []interface{}{})
	fake.streamIDMutex.Unlock()
	if fake.StreamIDStub != nil {
		return fake.StreamIDStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.streamIDReturns
	return fakeReturns.result1
}

func (fake *FakeStream) StreamIDCallCount() int {
	fake.streamIDMutex.RLock()
	defer fake.streamIDMutex.RUnlock()
	return len(fake.streamIDArgsForCall)
}

func (fake *FakeStream) StreamIDCalls(stub func() int) {
	fake.streamIDMutex.Lock()
	defer fake.streamIDMutex.Unlock()
	fake.StreamIDStub = stub
}

func (fake *FakeStream) StreamIDReturns(result1 int) {
	fake.streamIDMutex.Lock()
	defer fake.streamIDMutex.Unlock()
	fake.StreamIDStub = nil
	fake.streamIDReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeStream) StreamIDReturnsOnCall(i int, result1 int) {
	fake.streamIDMutex.Lock()
	defer fake.streamIDMutex.Unlock()
	fake.StreamIDStub = nil
	if fake.streamIDReturnsOnCall == nil {
		fake.streamIDReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.streamIDReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeStream) SubscribeEgress() <-chan *xivnet.Frame {
	fake.subscribeEgressMutex.Lock()
	ret, specificReturn := fake.subscribeEgressReturnsOnCall[len(fake.subscribeEgressArgsForCall)]
	fake.subscribeEgressArgsForCall = append(fake.subscribeEgressArgsForCall, struct {
	}{})
	fake.recordInvocation("SubscribeEgress", []interface{}{})
	fake.subscribeEgressMutex.Unlock()
	if fake.SubscribeEgressStub != nil {
		return fake.SubscribeEgressStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.subscribeEgressReturns
	return fakeReturns.result1
}

func (fake *FakeStream) SubscribeEgressCallCount() int {
	fake.subscribeEgressMutex.RLock()
	defer fake.subscribeEgressMutex.RUnlock()
	return len(fake.subscribeEgressArgsForCall)
}

func (fake *FakeStream) SubscribeEgressCalls(stub func() <-chan *xivnet.Frame) {
	fake.subscribeEgressMutex.Lock()
	defer fake.subscribeEgressMutex.Unlock()
	fake.SubscribeEgressStub = stub
}

func (fake *FakeStream) SubscribeEgressReturns(result1 <-chan *xivnet.Frame) {
	fake.subscribeEgressMutex.Lock()
	defer fake.subscribeEgressMutex.Unlock()
	fake.SubscribeEgressStub = nil
	fake.subscribeEgressReturns = struct {
		result1 <-chan *xivnet.Frame
	}{result1}
}

func (fake *FakeStream) SubscribeEgressReturnsOnCall(i int, result1 <-chan *xivnet.Frame) {
	fake.subscribeEgressMutex.Lock()
	defer fake.subscribeEgressMutex.Unlock()
	fake.SubscribeEgressStub = nil
	if fake.subscribeEgressReturnsOnCall == nil {
		fake.subscribeEgressReturnsOnCall = make(map[int]struct {
			result1 <-chan *xivnet.Frame
		})
	}
	fake.subscribeEgressReturnsOnCall[i] = struct {
		result1 <-chan *xivnet.Frame
	}{result1}
}

func (fake *FakeStream) SubscribeIngress() <-chan *xivnet.Frame {
	fake.subscribeIngressMutex.Lock()
	ret, specificReturn := fake.subscribeIngressReturnsOnCall[len(fake.subscribeIngressArgsForCall)]
	fake.subscribeIngressArgsForCall = append(fake.subscribeIngressArgsForCall, struct {
	}{})
	fake.recordInvocation("SubscribeIngress", []interface{}{})
	fake.subscribeIngressMutex.Unlock()
	if fake.SubscribeIngressStub != nil {
		return fake.SubscribeIngressStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.subscribeIngressReturns
	return fakeReturns.result1
}

func (fake *FakeStream) SubscribeIngressCallCount() int {
	fake.subscribeIngressMutex.RLock()
	defer fake.subscribeIngressMutex.RUnlock()
	return len(fake.subscribeIngressArgsForCall)
}

func (fake *FakeStream) SubscribeIngressCalls(stub func() <-chan *xivnet.Frame) {
	fake.subscribeIngressMutex.Lock()
	defer fake.subscribeIngressMutex.Unlock()
	fake.SubscribeIngressStub = stub
}

func (fake *FakeStream) SubscribeIngressReturns(result1 <-chan *xivnet.Frame) {
	fake.subscribeIngressMutex.Lock()
	defer fake.subscribeIngressMutex.Unlock()
	fake.SubscribeIngressStub = nil
	fake.subscribeIngressReturns = struct {
		result1 <-chan *xivnet.Frame
	}{result1}
}

func (fake *FakeStream) SubscribeIngressReturnsOnCall(i int, result1 <-chan *xivnet.Frame) {
	fake.subscribeIngressMutex.Lock()
	defer fake.subscribeIngressMutex.Unlock()
	fake.SubscribeIngressStub = nil
	if fake.subscribeIngressReturnsOnCall == nil {
		fake.subscribeIngressReturnsOnCall = make(map[int]struct {
			result1 <-chan *xivnet.Frame
		})
	}
	fake.subscribeIngressReturnsOnCall[i] = struct {
		result1 <-chan *xivnet.Frame
	}{result1}
}

func (fake *FakeStream) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sendRequestMutex.RLock()
	defer fake.sendRequestMutex.RUnlock()
	fake.serveMutex.RLock()
	defer fake.serveMutex.RUnlock()
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	fake.streamIDMutex.RLock()
	defer fake.streamIDMutex.RUnlock()
	fake.subscribeEgressMutex.RLock()
	defer fake.subscribeEgressMutex.RUnlock()
	fake.subscribeIngressMutex.RLock()
	defer fake.subscribeIngressMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStream) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ hook.Stream = new(FakeStream)
