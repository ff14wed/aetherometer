// Code generated by counterfeiter. DO NOT EDIT.
package streamfakes

import (
	"sync"

	"github.com/ff14wed/aetherometer/core/config"
	"github.com/ff14wed/aetherometer/core/stream"
	"go.uber.org/zap"
)

type FakeAdapterBuilder struct {
	BuildStub        func(chan<- stream.Provider, chan<- int, *zap.Logger) stream.Adapter
	buildMutex       sync.RWMutex
	buildArgsForCall []struct {
		arg1 chan<- stream.Provider
		arg2 chan<- int
		arg3 *zap.Logger
	}
	buildReturns struct {
		result1 stream.Adapter
	}
	buildReturnsOnCall map[int]struct {
		result1 stream.Adapter
	}
	LoadConfigStub        func(config.Config) error
	loadConfigMutex       sync.RWMutex
	loadConfigArgsForCall []struct {
		arg1 config.Config
	}
	loadConfigReturns struct {
		result1 error
	}
	loadConfigReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAdapterBuilder) Build(arg1 chan<- stream.Provider, arg2 chan<- int, arg3 *zap.Logger) stream.Adapter {
	fake.buildMutex.Lock()
	ret, specificReturn := fake.buildReturnsOnCall[len(fake.buildArgsForCall)]
	fake.buildArgsForCall = append(fake.buildArgsForCall, struct {
		arg1 chan<- stream.Provider
		arg2 chan<- int
		arg3 *zap.Logger
	}{arg1, arg2, arg3})
	fake.recordInvocation("Build", []interface{}{arg1, arg2, arg3})
	fake.buildMutex.Unlock()
	if fake.BuildStub != nil {
		return fake.BuildStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.buildReturns
	return fakeReturns.result1
}

func (fake *FakeAdapterBuilder) BuildCallCount() int {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return len(fake.buildArgsForCall)
}

func (fake *FakeAdapterBuilder) BuildCalls(stub func(chan<- stream.Provider, chan<- int, *zap.Logger) stream.Adapter) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = stub
}

func (fake *FakeAdapterBuilder) BuildArgsForCall(i int) (chan<- stream.Provider, chan<- int, *zap.Logger) {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	argsForCall := fake.buildArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAdapterBuilder) BuildReturns(result1 stream.Adapter) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = nil
	fake.buildReturns = struct {
		result1 stream.Adapter
	}{result1}
}

func (fake *FakeAdapterBuilder) BuildReturnsOnCall(i int, result1 stream.Adapter) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = nil
	if fake.buildReturnsOnCall == nil {
		fake.buildReturnsOnCall = make(map[int]struct {
			result1 stream.Adapter
		})
	}
	fake.buildReturnsOnCall[i] = struct {
		result1 stream.Adapter
	}{result1}
}

func (fake *FakeAdapterBuilder) LoadConfig(arg1 config.Config) error {
	fake.loadConfigMutex.Lock()
	ret, specificReturn := fake.loadConfigReturnsOnCall[len(fake.loadConfigArgsForCall)]
	fake.loadConfigArgsForCall = append(fake.loadConfigArgsForCall, struct {
		arg1 config.Config
	}{arg1})
	fake.recordInvocation("LoadConfig", []interface{}{arg1})
	fake.loadConfigMutex.Unlock()
	if fake.LoadConfigStub != nil {
		return fake.LoadConfigStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.loadConfigReturns
	return fakeReturns.result1
}

func (fake *FakeAdapterBuilder) LoadConfigCallCount() int {
	fake.loadConfigMutex.RLock()
	defer fake.loadConfigMutex.RUnlock()
	return len(fake.loadConfigArgsForCall)
}

func (fake *FakeAdapterBuilder) LoadConfigCalls(stub func(config.Config) error) {
	fake.loadConfigMutex.Lock()
	defer fake.loadConfigMutex.Unlock()
	fake.LoadConfigStub = stub
}

func (fake *FakeAdapterBuilder) LoadConfigArgsForCall(i int) config.Config {
	fake.loadConfigMutex.RLock()
	defer fake.loadConfigMutex.RUnlock()
	argsForCall := fake.loadConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAdapterBuilder) LoadConfigReturns(result1 error) {
	fake.loadConfigMutex.Lock()
	defer fake.loadConfigMutex.Unlock()
	fake.LoadConfigStub = nil
	fake.loadConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAdapterBuilder) LoadConfigReturnsOnCall(i int, result1 error) {
	fake.loadConfigMutex.Lock()
	defer fake.loadConfigMutex.Unlock()
	fake.LoadConfigStub = nil
	if fake.loadConfigReturnsOnCall == nil {
		fake.loadConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.loadConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAdapterBuilder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	fake.loadConfigMutex.RLock()
	defer fake.loadConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAdapterBuilder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ stream.AdapterBuilder = new(FakeAdapterBuilder)
