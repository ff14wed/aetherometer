// Code generated by counterfeiter. DO NOT EDIT.
package processfakes

import (
	sync "sync"

	process "github.com/ff14wed/aetherometer/core/process"
)

type FakeEnumerator struct {
	EnumerateProcessesStub        func() (map[uint32]string, error)
	enumerateProcessesMutex       sync.RWMutex
	enumerateProcessesArgsForCall []struct {
	}
	enumerateProcessesReturns struct {
		result1 map[uint32]string
		result2 error
	}
	enumerateProcessesReturnsOnCall map[int]struct {
		result1 map[uint32]string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEnumerator) EnumerateProcesses() (map[uint32]string, error) {
	fake.enumerateProcessesMutex.Lock()
	ret, specificReturn := fake.enumerateProcessesReturnsOnCall[len(fake.enumerateProcessesArgsForCall)]
	fake.enumerateProcessesArgsForCall = append(fake.enumerateProcessesArgsForCall, struct {
	}{})
	fake.recordInvocation("EnumerateProcesses", []interface{}{})
	fake.enumerateProcessesMutex.Unlock()
	if fake.EnumerateProcessesStub != nil {
		return fake.EnumerateProcessesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enumerateProcessesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEnumerator) EnumerateProcessesCallCount() int {
	fake.enumerateProcessesMutex.RLock()
	defer fake.enumerateProcessesMutex.RUnlock()
	return len(fake.enumerateProcessesArgsForCall)
}

func (fake *FakeEnumerator) EnumerateProcessesCalls(stub func() (map[uint32]string, error)) {
	fake.enumerateProcessesMutex.Lock()
	defer fake.enumerateProcessesMutex.Unlock()
	fake.EnumerateProcessesStub = stub
}

func (fake *FakeEnumerator) EnumerateProcessesReturns(result1 map[uint32]string, result2 error) {
	fake.enumerateProcessesMutex.Lock()
	defer fake.enumerateProcessesMutex.Unlock()
	fake.EnumerateProcessesStub = nil
	fake.enumerateProcessesReturns = struct {
		result1 map[uint32]string
		result2 error
	}{result1, result2}
}

func (fake *FakeEnumerator) EnumerateProcessesReturnsOnCall(i int, result1 map[uint32]string, result2 error) {
	fake.enumerateProcessesMutex.Lock()
	defer fake.enumerateProcessesMutex.Unlock()
	fake.EnumerateProcessesStub = nil
	if fake.enumerateProcessesReturnsOnCall == nil {
		fake.enumerateProcessesReturnsOnCall = make(map[int]struct {
			result1 map[uint32]string
			result2 error
		})
	}
	fake.enumerateProcessesReturnsOnCall[i] = struct {
		result1 map[uint32]string
		result2 error
	}{result1, result2}
}

func (fake *FakeEnumerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.enumerateProcessesMutex.RLock()
	defer fake.enumerateProcessesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEnumerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ process.Enumerator = new(FakeEnumerator)
