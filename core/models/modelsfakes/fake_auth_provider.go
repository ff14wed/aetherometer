// Code generated by counterfeiter. DO NOT EDIT.
package modelsfakes

import (
	"context"
	"sync"

	"github.com/ff14wed/aetherometer/core/models"
)

type FakeAuthProvider struct {
	AddPluginStub        func(string) (string, error)
	addPluginMutex       sync.RWMutex
	addPluginArgsForCall []struct {
		arg1 string
	}
	addPluginReturns struct {
		result1 string
		result2 error
	}
	addPluginReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	AuthorizePluginTokenStub        func(context.Context) error
	authorizePluginTokenMutex       sync.RWMutex
	authorizePluginTokenArgsForCall []struct {
		arg1 context.Context
	}
	authorizePluginTokenReturns struct {
		result1 error
	}
	authorizePluginTokenReturnsOnCall map[int]struct {
		result1 error
	}
	RemovePluginStub        func(string) (bool, error)
	removePluginMutex       sync.RWMutex
	removePluginArgsForCall []struct {
		arg1 string
	}
	removePluginReturns struct {
		result1 bool
		result2 error
	}
	removePluginReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthProvider) AddPlugin(arg1 string) (string, error) {
	fake.addPluginMutex.Lock()
	ret, specificReturn := fake.addPluginReturnsOnCall[len(fake.addPluginArgsForCall)]
	fake.addPluginArgsForCall = append(fake.addPluginArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("AddPlugin", []interface{}{arg1})
	fake.addPluginMutex.Unlock()
	if fake.AddPluginStub != nil {
		return fake.AddPluginStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.addPluginReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuthProvider) AddPluginCallCount() int {
	fake.addPluginMutex.RLock()
	defer fake.addPluginMutex.RUnlock()
	return len(fake.addPluginArgsForCall)
}

func (fake *FakeAuthProvider) AddPluginCalls(stub func(string) (string, error)) {
	fake.addPluginMutex.Lock()
	defer fake.addPluginMutex.Unlock()
	fake.AddPluginStub = stub
}

func (fake *FakeAuthProvider) AddPluginArgsForCall(i int) string {
	fake.addPluginMutex.RLock()
	defer fake.addPluginMutex.RUnlock()
	argsForCall := fake.addPluginArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuthProvider) AddPluginReturns(result1 string, result2 error) {
	fake.addPluginMutex.Lock()
	defer fake.addPluginMutex.Unlock()
	fake.AddPluginStub = nil
	fake.addPluginReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthProvider) AddPluginReturnsOnCall(i int, result1 string, result2 error) {
	fake.addPluginMutex.Lock()
	defer fake.addPluginMutex.Unlock()
	fake.AddPluginStub = nil
	if fake.addPluginReturnsOnCall == nil {
		fake.addPluginReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.addPluginReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthProvider) AuthorizePluginToken(arg1 context.Context) error {
	fake.authorizePluginTokenMutex.Lock()
	ret, specificReturn := fake.authorizePluginTokenReturnsOnCall[len(fake.authorizePluginTokenArgsForCall)]
	fake.authorizePluginTokenArgsForCall = append(fake.authorizePluginTokenArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("AuthorizePluginToken", []interface{}{arg1})
	fake.authorizePluginTokenMutex.Unlock()
	if fake.AuthorizePluginTokenStub != nil {
		return fake.AuthorizePluginTokenStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.authorizePluginTokenReturns
	return fakeReturns.result1
}

func (fake *FakeAuthProvider) AuthorizePluginTokenCallCount() int {
	fake.authorizePluginTokenMutex.RLock()
	defer fake.authorizePluginTokenMutex.RUnlock()
	return len(fake.authorizePluginTokenArgsForCall)
}

func (fake *FakeAuthProvider) AuthorizePluginTokenCalls(stub func(context.Context) error) {
	fake.authorizePluginTokenMutex.Lock()
	defer fake.authorizePluginTokenMutex.Unlock()
	fake.AuthorizePluginTokenStub = stub
}

func (fake *FakeAuthProvider) AuthorizePluginTokenArgsForCall(i int) context.Context {
	fake.authorizePluginTokenMutex.RLock()
	defer fake.authorizePluginTokenMutex.RUnlock()
	argsForCall := fake.authorizePluginTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuthProvider) AuthorizePluginTokenReturns(result1 error) {
	fake.authorizePluginTokenMutex.Lock()
	defer fake.authorizePluginTokenMutex.Unlock()
	fake.AuthorizePluginTokenStub = nil
	fake.authorizePluginTokenReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthProvider) AuthorizePluginTokenReturnsOnCall(i int, result1 error) {
	fake.authorizePluginTokenMutex.Lock()
	defer fake.authorizePluginTokenMutex.Unlock()
	fake.AuthorizePluginTokenStub = nil
	if fake.authorizePluginTokenReturnsOnCall == nil {
		fake.authorizePluginTokenReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.authorizePluginTokenReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthProvider) RemovePlugin(arg1 string) (bool, error) {
	fake.removePluginMutex.Lock()
	ret, specificReturn := fake.removePluginReturnsOnCall[len(fake.removePluginArgsForCall)]
	fake.removePluginArgsForCall = append(fake.removePluginArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("RemovePlugin", []interface{}{arg1})
	fake.removePluginMutex.Unlock()
	if fake.RemovePluginStub != nil {
		return fake.RemovePluginStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.removePluginReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuthProvider) RemovePluginCallCount() int {
	fake.removePluginMutex.RLock()
	defer fake.removePluginMutex.RUnlock()
	return len(fake.removePluginArgsForCall)
}

func (fake *FakeAuthProvider) RemovePluginCalls(stub func(string) (bool, error)) {
	fake.removePluginMutex.Lock()
	defer fake.removePluginMutex.Unlock()
	fake.RemovePluginStub = stub
}

func (fake *FakeAuthProvider) RemovePluginArgsForCall(i int) string {
	fake.removePluginMutex.RLock()
	defer fake.removePluginMutex.RUnlock()
	argsForCall := fake.removePluginArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuthProvider) RemovePluginReturns(result1 bool, result2 error) {
	fake.removePluginMutex.Lock()
	defer fake.removePluginMutex.Unlock()
	fake.RemovePluginStub = nil
	fake.removePluginReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthProvider) RemovePluginReturnsOnCall(i int, result1 bool, result2 error) {
	fake.removePluginMutex.Lock()
	defer fake.removePluginMutex.Unlock()
	fake.RemovePluginStub = nil
	if fake.removePluginReturnsOnCall == nil {
		fake.removePluginReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.removePluginReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addPluginMutex.RLock()
	defer fake.addPluginMutex.RUnlock()
	fake.authorizePluginTokenMutex.RLock()
	defer fake.authorizePluginTokenMutex.RUnlock()
	fake.removePluginMutex.RLock()
	defer fake.removePluginMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuthProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ models.AuthProvider = new(FakeAuthProvider)
