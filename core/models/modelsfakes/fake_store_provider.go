// Code generated by counterfeiter. DO NOT EDIT.
package modelsfakes

import (
	"sync"

	"github.com/ff14wed/aetherometer/core/models"
)

type FakeStoreProvider struct {
	EntityStub        func(int, uint64) (models.Entity, error)
	entityMutex       sync.RWMutex
	entityArgsForCall []struct {
		arg1 int
		arg2 uint64
	}
	entityReturns struct {
		result1 models.Entity
		result2 error
	}
	entityReturnsOnCall map[int]struct {
		result1 models.Entity
		result2 error
	}
	EntityEventSourceStub        func() models.EntityEventSource
	entityEventSourceMutex       sync.RWMutex
	entityEventSourceArgsForCall []struct {
	}
	entityEventSourceReturns struct {
		result1 models.EntityEventSource
	}
	entityEventSourceReturnsOnCall map[int]struct {
		result1 models.EntityEventSource
	}
	StreamStub        func(int) (models.Stream, error)
	streamMutex       sync.RWMutex
	streamArgsForCall []struct {
		arg1 int
	}
	streamReturns struct {
		result1 models.Stream
		result2 error
	}
	streamReturnsOnCall map[int]struct {
		result1 models.Stream
		result2 error
	}
	StreamEventSourceStub        func() models.StreamEventSource
	streamEventSourceMutex       sync.RWMutex
	streamEventSourceArgsForCall []struct {
	}
	streamEventSourceReturns struct {
		result1 models.StreamEventSource
	}
	streamEventSourceReturnsOnCall map[int]struct {
		result1 models.StreamEventSource
	}
	StreamsStub        func() ([]models.Stream, error)
	streamsMutex       sync.RWMutex
	streamsArgsForCall []struct {
	}
	streamsReturns struct {
		result1 []models.Stream
		result2 error
	}
	streamsReturnsOnCall map[int]struct {
		result1 []models.Stream
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStoreProvider) Entity(arg1 int, arg2 uint64) (models.Entity, error) {
	fake.entityMutex.Lock()
	ret, specificReturn := fake.entityReturnsOnCall[len(fake.entityArgsForCall)]
	fake.entityArgsForCall = append(fake.entityArgsForCall, struct {
		arg1 int
		arg2 uint64
	}{arg1, arg2})
	fake.recordInvocation("Entity", []interface{}{arg1, arg2})
	fake.entityMutex.Unlock()
	if fake.EntityStub != nil {
		return fake.EntityStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.entityReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStoreProvider) EntityCallCount() int {
	fake.entityMutex.RLock()
	defer fake.entityMutex.RUnlock()
	return len(fake.entityArgsForCall)
}

func (fake *FakeStoreProvider) EntityCalls(stub func(int, uint64) (models.Entity, error)) {
	fake.entityMutex.Lock()
	defer fake.entityMutex.Unlock()
	fake.EntityStub = stub
}

func (fake *FakeStoreProvider) EntityArgsForCall(i int) (int, uint64) {
	fake.entityMutex.RLock()
	defer fake.entityMutex.RUnlock()
	argsForCall := fake.entityArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStoreProvider) EntityReturns(result1 models.Entity, result2 error) {
	fake.entityMutex.Lock()
	defer fake.entityMutex.Unlock()
	fake.EntityStub = nil
	fake.entityReturns = struct {
		result1 models.Entity
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreProvider) EntityReturnsOnCall(i int, result1 models.Entity, result2 error) {
	fake.entityMutex.Lock()
	defer fake.entityMutex.Unlock()
	fake.EntityStub = nil
	if fake.entityReturnsOnCall == nil {
		fake.entityReturnsOnCall = make(map[int]struct {
			result1 models.Entity
			result2 error
		})
	}
	fake.entityReturnsOnCall[i] = struct {
		result1 models.Entity
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreProvider) EntityEventSource() models.EntityEventSource {
	fake.entityEventSourceMutex.Lock()
	ret, specificReturn := fake.entityEventSourceReturnsOnCall[len(fake.entityEventSourceArgsForCall)]
	fake.entityEventSourceArgsForCall = append(fake.entityEventSourceArgsForCall, struct {
	}{})
	fake.recordInvocation("EntityEventSource", []interface{}{})
	fake.entityEventSourceMutex.Unlock()
	if fake.EntityEventSourceStub != nil {
		return fake.EntityEventSourceStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.entityEventSourceReturns
	return fakeReturns.result1
}

func (fake *FakeStoreProvider) EntityEventSourceCallCount() int {
	fake.entityEventSourceMutex.RLock()
	defer fake.entityEventSourceMutex.RUnlock()
	return len(fake.entityEventSourceArgsForCall)
}

func (fake *FakeStoreProvider) EntityEventSourceCalls(stub func() models.EntityEventSource) {
	fake.entityEventSourceMutex.Lock()
	defer fake.entityEventSourceMutex.Unlock()
	fake.EntityEventSourceStub = stub
}

func (fake *FakeStoreProvider) EntityEventSourceReturns(result1 models.EntityEventSource) {
	fake.entityEventSourceMutex.Lock()
	defer fake.entityEventSourceMutex.Unlock()
	fake.EntityEventSourceStub = nil
	fake.entityEventSourceReturns = struct {
		result1 models.EntityEventSource
	}{result1}
}

func (fake *FakeStoreProvider) EntityEventSourceReturnsOnCall(i int, result1 models.EntityEventSource) {
	fake.entityEventSourceMutex.Lock()
	defer fake.entityEventSourceMutex.Unlock()
	fake.EntityEventSourceStub = nil
	if fake.entityEventSourceReturnsOnCall == nil {
		fake.entityEventSourceReturnsOnCall = make(map[int]struct {
			result1 models.EntityEventSource
		})
	}
	fake.entityEventSourceReturnsOnCall[i] = struct {
		result1 models.EntityEventSource
	}{result1}
}

func (fake *FakeStoreProvider) Stream(arg1 int) (models.Stream, error) {
	fake.streamMutex.Lock()
	ret, specificReturn := fake.streamReturnsOnCall[len(fake.streamArgsForCall)]
	fake.streamArgsForCall = append(fake.streamArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("Stream", []interface{}{arg1})
	fake.streamMutex.Unlock()
	if fake.StreamStub != nil {
		return fake.StreamStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.streamReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStoreProvider) StreamCallCount() int {
	fake.streamMutex.RLock()
	defer fake.streamMutex.RUnlock()
	return len(fake.streamArgsForCall)
}

func (fake *FakeStoreProvider) StreamCalls(stub func(int) (models.Stream, error)) {
	fake.streamMutex.Lock()
	defer fake.streamMutex.Unlock()
	fake.StreamStub = stub
}

func (fake *FakeStoreProvider) StreamArgsForCall(i int) int {
	fake.streamMutex.RLock()
	defer fake.streamMutex.RUnlock()
	argsForCall := fake.streamArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStoreProvider) StreamReturns(result1 models.Stream, result2 error) {
	fake.streamMutex.Lock()
	defer fake.streamMutex.Unlock()
	fake.StreamStub = nil
	fake.streamReturns = struct {
		result1 models.Stream
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreProvider) StreamReturnsOnCall(i int, result1 models.Stream, result2 error) {
	fake.streamMutex.Lock()
	defer fake.streamMutex.Unlock()
	fake.StreamStub = nil
	if fake.streamReturnsOnCall == nil {
		fake.streamReturnsOnCall = make(map[int]struct {
			result1 models.Stream
			result2 error
		})
	}
	fake.streamReturnsOnCall[i] = struct {
		result1 models.Stream
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreProvider) StreamEventSource() models.StreamEventSource {
	fake.streamEventSourceMutex.Lock()
	ret, specificReturn := fake.streamEventSourceReturnsOnCall[len(fake.streamEventSourceArgsForCall)]
	fake.streamEventSourceArgsForCall = append(fake.streamEventSourceArgsForCall, struct {
	}{})
	fake.recordInvocation("StreamEventSource", []interface{}{})
	fake.streamEventSourceMutex.Unlock()
	if fake.StreamEventSourceStub != nil {
		return fake.StreamEventSourceStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.streamEventSourceReturns
	return fakeReturns.result1
}

func (fake *FakeStoreProvider) StreamEventSourceCallCount() int {
	fake.streamEventSourceMutex.RLock()
	defer fake.streamEventSourceMutex.RUnlock()
	return len(fake.streamEventSourceArgsForCall)
}

func (fake *FakeStoreProvider) StreamEventSourceCalls(stub func() models.StreamEventSource) {
	fake.streamEventSourceMutex.Lock()
	defer fake.streamEventSourceMutex.Unlock()
	fake.StreamEventSourceStub = stub
}

func (fake *FakeStoreProvider) StreamEventSourceReturns(result1 models.StreamEventSource) {
	fake.streamEventSourceMutex.Lock()
	defer fake.streamEventSourceMutex.Unlock()
	fake.StreamEventSourceStub = nil
	fake.streamEventSourceReturns = struct {
		result1 models.StreamEventSource
	}{result1}
}

func (fake *FakeStoreProvider) StreamEventSourceReturnsOnCall(i int, result1 models.StreamEventSource) {
	fake.streamEventSourceMutex.Lock()
	defer fake.streamEventSourceMutex.Unlock()
	fake.StreamEventSourceStub = nil
	if fake.streamEventSourceReturnsOnCall == nil {
		fake.streamEventSourceReturnsOnCall = make(map[int]struct {
			result1 models.StreamEventSource
		})
	}
	fake.streamEventSourceReturnsOnCall[i] = struct {
		result1 models.StreamEventSource
	}{result1}
}

func (fake *FakeStoreProvider) Streams() ([]models.Stream, error) {
	fake.streamsMutex.Lock()
	ret, specificReturn := fake.streamsReturnsOnCall[len(fake.streamsArgsForCall)]
	fake.streamsArgsForCall = append(fake.streamsArgsForCall, struct {
	}{})
	fake.recordInvocation("Streams", []interface{}{})
	fake.streamsMutex.Unlock()
	if fake.StreamsStub != nil {
		return fake.StreamsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.streamsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStoreProvider) StreamsCallCount() int {
	fake.streamsMutex.RLock()
	defer fake.streamsMutex.RUnlock()
	return len(fake.streamsArgsForCall)
}

func (fake *FakeStoreProvider) StreamsCalls(stub func() ([]models.Stream, error)) {
	fake.streamsMutex.Lock()
	defer fake.streamsMutex.Unlock()
	fake.StreamsStub = stub
}

func (fake *FakeStoreProvider) StreamsReturns(result1 []models.Stream, result2 error) {
	fake.streamsMutex.Lock()
	defer fake.streamsMutex.Unlock()
	fake.StreamsStub = nil
	fake.streamsReturns = struct {
		result1 []models.Stream
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreProvider) StreamsReturnsOnCall(i int, result1 []models.Stream, result2 error) {
	fake.streamsMutex.Lock()
	defer fake.streamsMutex.Unlock()
	fake.StreamsStub = nil
	if fake.streamsReturnsOnCall == nil {
		fake.streamsReturnsOnCall = make(map[int]struct {
			result1 []models.Stream
			result2 error
		})
	}
	fake.streamsReturnsOnCall[i] = struct {
		result1 []models.Stream
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.entityMutex.RLock()
	defer fake.entityMutex.RUnlock()
	fake.entityEventSourceMutex.RLock()
	defer fake.entityEventSourceMutex.RUnlock()
	fake.streamMutex.RLock()
	defer fake.streamMutex.RUnlock()
	fake.streamEventSourceMutex.RLock()
	defer fake.streamEventSourceMutex.RUnlock()
	fake.streamsMutex.RLock()
	defer fake.streamsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStoreProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ models.StoreProvider = new(FakeStoreProvider)
