// Code generated by counterfeiter. DO NOT EDIT.
package hookfakes

import (
	"sync"

	"github.com/ff14wed/aetherometer/core/adapter/hook"
)

type FakeHookDataSender struct {
	SendStub        func(byte, uint32, []byte)
	sendMutex       sync.RWMutex
	sendArgsForCall []struct {
		arg1 byte
		arg2 uint32
		arg3 []byte
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHookDataSender) Send(arg1 byte, arg2 uint32, arg3 []byte) {
	var arg3Copy []byte
	if arg3 != nil {
		arg3Copy = make([]byte, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.sendMutex.Lock()
	fake.sendArgsForCall = append(fake.sendArgsForCall, struct {
		arg1 byte
		arg2 uint32
		arg3 []byte
	}{arg1, arg2, arg3Copy})
	fake.recordInvocation("Send", []interface{}{arg1, arg2, arg3Copy})
	fake.sendMutex.Unlock()
	if fake.SendStub != nil {
		fake.SendStub(arg1, arg2, arg3)
	}
}

func (fake *FakeHookDataSender) SendCallCount() int {
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	return len(fake.sendArgsForCall)
}

func (fake *FakeHookDataSender) SendCalls(stub func(byte, uint32, []byte)) {
	fake.sendMutex.Lock()
	defer fake.sendMutex.Unlock()
	fake.SendStub = stub
}

func (fake *FakeHookDataSender) SendArgsForCall(i int) (byte, uint32, []byte) {
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	argsForCall := fake.sendArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHookDataSender) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHookDataSender) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ hook.HookDataSender = new(FakeHookDataSender)
